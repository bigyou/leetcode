package in.kaixin.leetcode_byhand.other;

import java.util.*;

/**
 * @Author bigyou
 * @Create 2023/7/19 20:04
 */
public class RobotSim {
    //    TODO
    //    mid
//    https://leetcode.cn/problems/walking-robot-simulation/
    public int robotSim(int[] commands, int[][] obstacles) {
        Map<Integer, List<Integer>> xBlock = new HashMap<>();
        Map<Integer, List<Integer>> yBlock = new HashMap<>();
        int maxv = 0;

        for (int i = 0; i < obstacles.length; i++) {
            int x = obstacles[i][0];
            int y = obstacles[i][1];
            List<Integer> ys = xBlock.get(x);
            if (ys == null) {
                ys = new LinkedList<>();
                xBlock.put(x, ys);
            }
            ys.add(y);
            List<Integer> xs = yBlock.get(y);
            if (xs == null) {
                xs = new LinkedList<>();
                yBlock.put(y, xs);
            }
            xs.add(x);
        }

        for (List<Integer> value : xBlock.values()) {
            value.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer o1, Integer o2) {
                    if (o1 > o2) {
                        return 1;
                    } else if (o1 < o2) {
                        return -1;
                    }
                    return 0;
                }
            });
        }
        for (List<Integer> value : yBlock.values()) {
            value.sort(new Comparator<Integer>() {
                @Override
                public int compare(Integer o1, Integer o2) {
                    if (o1 > o2) {
                        return 1;
                    } else if (o1 < o2) {
                        return -1;
                    }
                    return 0;
                }
            });
        }
        int degree = 90;//以水平向右的x轴为0度，开始向北所以是90度
        int x = 0;
        int y = 0;
        for (int i = 0; i < commands.length; i++) {
            int v = commands[i];
            if (v == -1) {
                degree -= 90;
                if (degree < 0) {
                    degree += 360;
                }

            } else if (v == -2) {
                degree += 90;
                if (degree >= 360) {
                    degree -= 360;
                }
            } else {
                if (degree == 0) {
                    x = getV(yBlock.get(y), x, x + v);

                } else if (degree == 90) {
                    y = getV(xBlock.get(x), y, y + v);

                } else if (degree == 180) {
                    x = getVReverse(yBlock.get(y), x, x - v);
                } else if (degree == 270) {
                    y = getVReverse(xBlock.get(x), y, y - v);
                }
                maxv = Math.max(x * x + y * y, maxv);
            }

        }

        return maxv;
    }

    /**
     * 找到
     *
     * @param list
     * @param start
     * @param end
     * @return
     */
    public int getV(List<Integer> list, int start, int end) {
        if (list == null || list.size() == 0) {
            return end;
        }
        if (list.get(0) > end || list.get(list.size() - 1) <= start) {
            return end;
        }
//        int left = 0;
//        int right = list.size() - 1;
//        int pos = -1;
//        //二分查找
//        while (left <= right) {
//            if (list.get(left) > start) {
//                pos = left - 1;
//                break;
//            }
//            if (list.get(right) < start) {
//                pos = right;
//                break;
//            }
//            int mid = (left + right) / 2;
//            if (list.get(mid) > start) {
//                right = mid;
//            } else {
//                left = mid + 1;
//            }
//        }
//        int res = 0;
//        res = list.get(pos + 1) <= end ? list.get(pos + 1) - 1 : end;


        Integer cursor = 0;
        for (int i = 0; i < list.size(); i++) {
            if (list.get(i) > start) {
                cursor = i;
                break;
            }
        }
        int res2 = list.get(cursor) > end ? end : list.get(cursor)-1;
//        if (res != res2) {
//            System.out.println("xxres=" + res + ",res2=" + res2 + ",start=" + start + ",end=" + end);
//        }

        return res2;
    }

    public int getVReverse(List<Integer> list, int start, int end) {
        if (list == null || list.size() == 0) {
            return end;
        }

        if (list.get(0) >= start || list.get(list.size() - 1) < end) {
            return end;
        }

//        int left = 0;
//        int right = list.size() - 1;
//        int pos = list.size();
//        //二分查找
//        while (left <= right) {//找到第一个 小于start的点
//            if (list.get(left) >= start) {
//                pos = left - 1;
//                break;
//            }
//            if (list.get(right) < start) {
//                pos = right;
//                break;
//            }
//
//
//            int mid = (left + right) / 2;
//            if (list.get(mid) > start) {
//                right = mid;
//            } else {
//                left = mid + 1;
//            }
//        }
//        int res = 0;
//        res = list.get(pos) >= end ? list.get(pos) + 1 : end;
        int cursor = list.size() - 1;
        for (int i = 0; i < list.size(); i++) {
            if (list.get(i) >= start) {
                cursor = i - 1;
                break;
            }
        }
        int res2 = list.get(cursor) >= end ? list.get(cursor) + 1 : end;
//        int res2 = list.get(cursor) < end ? end:list.get(cursor) + 1 ;
//        if (res != res2) {
//            System.out.println("res=" + res + ",res2=" + res2 + ",start=" + start + ",end=" + end);
//        }
        return res2;
    }

    public static void main(String[] args) {
//        输入：commands = [4,-1,4,-2,4], obstacles = [[2,4]]
        RobotSim s = new RobotSim();
        int v = 0;
        v = s.robotSim(new int[]{4, -1, 4, -2, 4}, new int[][]{{2, 4}});
        System.out.println(v);
        v = s.robotSim(new int[]{6, -1, -1, 6}, new int[][]{});
        System.out.println(v);
        v = s.robotSim(new int[]{7, -2, -2, 7, 5}, new int[][]{{-3, 2}, {-2, 1}, {0, 1}, {-2, 4}, {-1, 0}, {-2, -3}, {0, -3}, {4, 4}, {-3, 3}, {2, 2}});
        System.out.println(v);


        v = s.robotSim(new int[]{1, 2, -2, 5, -1, -2, -1, 8, 3, -1, 9, 4, -2, 3, 2, 4, 3, 9, 2, -1, -1, -2, 1, 3, -2, 4, 1, 4, -1, 1, 9, -1, -2, 5, -1, 5, 5, -2, 6, 6, 7, 7, 2, 8, 9, -1, 7, 4, 6, 9, 9, 9, -1, 5, 1, 3, 3, -1, 5, 9, 7, 4, 8, -1, -2, 1, 3, 2, 9, 3, -1, -2, 8, 8, 7, 5, -2, 6, 8, 4, 6, 2, 7, 2, -1, 7, -2, 3, 3, 2, -2, 6, 9, 8, 1, -2, -1, 1, 4, 7}, new int[][]{{-57, -58}, {-72, 91}, {-55, 35}, {-20, 29}, {51, 70}, {-61, 88}, {-62, 99}, {52, 17}, {-75, -32}, {91, -22}, {54, 33}, {-45, -59}, {47, -48}, {53, -98}, {-91, 83}, {81, 12}, {-34, -90}, {-79, -82}, {-15, -86}, {-24, 66}, {-35, 35}, {3, 31}, {87, 93}, {2, -19}, {87, -93}, {24, -10}, {84, -53}, {86, 87}, {-88, -18}, {-51, 89}, {96, 66}, {-77, -94}, {-39, -1}, {89, 51}, {-23, -72}, {27, 24}, {53, -80}, {52, -33}, {32, 4}, {78, -55}, {-25, 18}, {-23, 47}, {79, -5}, {-23, -22}, {14, -25}, {-11, 69}, {63, 36}, {35, -99}, {-24, 82}, {-29, -98}, {-50, -70}, {72, 95}, {80, 80}, {-68, -40}, {65, 70}, {-92, 78}, {-45, -63}, {1, 34}, {81, 50}, {14, 91}, {-77, -54}, {13, -88}, {24, 37}, {-12, 59}, {-48, -62}, {57, -22}, {-8, 85}, {48, 71}, {12, 1}, {-20, 36}, {-32, -14}, {39, 46}, {-41, 75}, {13, -23}, {98, 10}, {-88, 64}, {50, 37}, {-95, -32}, {46, -91}, {10, 79}, {-11, 43}, {-94, 98}, {79, 42}, {51, 71}, {4, -30}, {2, 74}, {4, 10}, {61, 98}, {57, 98}, {46, 43}, {-16, 72}, {53, -69}, {54, -96}, {22, 0}, {-7, 92}, {-69, 80}, {68, -73}, {-24, -92}, {-21, 82}, {32, -1}, {-6, 16}, {15, -29}, {70, -66}, {-85, 80}, {50, -3}, {6, 13}, {-30, -98}, {-30, 59}, {-67, 40}, {17, 72}, {79, 82}, {89, -100}, {2, 79}, {-95, -46}, {17, 68}, {-46, 81}, {-5, -57}, {7, 58}, {-42, 68}, {19, -95}, {-17, -76}, {81, -86}, {79, 78}, {-82, -67}, {6, 0}, {35, -16}, {98, 83}, {-81, 100}, {-11, 46}, {-21, -38}, {-30, -41}, {86, 18}, {-68, 6}, {80, 75}, {-96, -44}, {-19, 66}, {21, 84}, {-56, -64}, {39, -15}, {0, 45}, {-81, -54}, {-66, -93}, {-4, 2}, {-42, -67}, {-15, -33}, {1, -32}, {-74, -24}, {7, 18}, {-62, 84}, {19, 61}, {39, 79}, {60, -98}, {-76, 45}, {58, -98}, {33, 26}, {-74, -95}, {22, 30}, {-68, -62}, {-59, 4}, {-62, 35}, {-78, 80}, {-82, 54}, {-42, 81}, {56, -15}, {32, -19}, {34, 93}, {57, -100}, {-1, -87}, {68, -26}, {18, 86}, {-55, -19}, {-68, -99}, {-9, 47}, {24, 94}, {92, 97}, {5, 67}, {97, -71}, {63, -57}, {-52, -14}, {-86, -78}, {-17, 92}, {-61, -83}, {-84, -10}, {20, 13}, {-68, -47}, {7, 28}, {66, 89}, {-41, -17}, {-14, -46}, {-72, -91}, {4, 52}, {-17, -59}, {-85, -46}, {-94, -23}, {-48, -3}, {-64, -37}, {2, 26}, {76, 88}, {-8, -46}, {-19, -68}});
        System.out.println(v);
        v = s.robotSim(new int[]{6,6,4,7,8,4,4,9,3,4,-2,-1,1,1,-1,6,9,-2,9,4,8,6,9,-1,2,5,1,5,-2,6,3,5,-2,-1,7,7,-1,6,6,9,-1,1,3,-2,4,-1,7,4,1,6,-2,2,-2,3,8,3,-1,3,5,-2,-1,1,4,-1,8,2,-2,1,2,3,8,1,3,8,1,-1,2,3,3,8,7,3,7,7,1,9,2,5,-1,1,-1,4,1,6,1,-1,5,9,4,4},
                new int[][]{{51,-36},{55,-35},{-34,-7},{23,-11},{-94,81},{0,26},{-33,52},{59,-55},{4,53},{100,96},{11,-71},{22,49},{25,-57},{-34,4},{54,-95},{-87,14},{45,-44},{21,-16},{23,75},{-82,86},{54,68},{47,-90},{-64,-4},{82,-6},{-27,90},{-27,-22},{-48,-92},{-67,30},{22,-58},{-36,15},{-22,23},{-57,-66},{74,77},{14,44},{-30,-82},{-67,-33},{90,-23},{-10,74},{-54,25},{63,63},{82,11},{-90,73},{-51,37},{-76,-17},{-39,-68},{97,25},{91,29},{-44,-56},{-34,22},{95,7},{68,-83},{89,50},{86,72},{-42,59},{40,-17},{61,-41},{98,-24},{71,-49},{86,-55},{79,77},{-44,-79},{-25,-47},{92,66},{-6,9},{37,-48},{0,84},{-60,-86},{-99,29},{38,-34},{-15,8},{-26,-96},{70,86},{-62,35},{43,55},{78,-28},{87,90},{-90,-72},{72,73},{6,-94},{-12,54},{-88,62},{80,51},{-73,-47},{58,16},{36,56},{9,-29},{38,-68},{7,-30},{77,5},{52,-19},{89,-6},{69,-15},{-98,64},{84,24},{94,-82},{-65,-14},{-43,6},{-7,87},{60,17},{-55,-68},{11,-6},{54,78},{16,8},{92,-25},{-75,-70},{-35,-94},{-67,93},{-2,-9},{28,51},{-68,15},{76,96},{-85,-15},{0,74},{-65,-53},{-84,-16},{-100,16},{-12,70},{-30,18},{14,49},{28,-73},{47,48},{15,-42},{47,41},{49,79},{27,44},{-45,-19},{-2,21},{-39,-96},{44,43},{-61,30},{4,-66},{-83,35},{100,14},{74,73},{45,9},{53,-76},{40,-85},{-24,-29},{-49,-39},{-22,-98},{-96,-71},{15,-79},{34,45},{87,-33},{-13,79},{-88,-11},{53,70},{71,81},{-42,-25},{-84,-47},{27,35},{-66,-76},{2,-98},{-61,72},{95,-74},{75,-72},{-32,90},{-51,-20},{-23,-77},{-34,-26},{5,81},{-7,33},{69,-4},{-12,27},{-83,2},{1,86},{69,-1},{38,-29},{32,59},{-49,-90},{33,-43},{-90,92},{98,98},{68,0},{1,-41},{44,70},{44,26},{58,-90},{30,-15},{-88,88},{-33,34},{-67,41},{-28,-62},{76,-70},{-92,82},{8,70},{-6,67},{66,-18},{92,-82},{-37,94},{8,-82},{-52,71},{-86,42},{-30,4},{92,-73},{97,3},{73,75},{81,-44},{-93,95},{0,-90}});
        System.out.println(v+",15049");


    }
}
